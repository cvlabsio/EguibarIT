name: Publish Module

on:
  pull_request:
    branches: [main]

  workflow_dispatch:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e., v1.0, v20.15.10

jobs:
  # 1st Job -- Setup environment
  setup_environment:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checkout the Repository
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set required PowerShell modules
        id: psmodulecache
        uses: potatoqualitee/psmodulecache@v1
        with:
          modules-to-cache: Pester, PSScriptAnalyzer, InvokeBuild, platyPS

      - name: Setup PowerShell module cache
        id: cacher
        uses: actions/cache@v2
        with:
          path: ${{ steps.psmodulecache.outputs.modulepath }}
          key: ${{ steps.psmodulecache.outputs.keygen }}

      - name: Install required PowerShell modules
        if: steps.cacher.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module ${{ steps.psmodulecache.outputs.needed }} -ErrorAction Stop

  # 2nd Job -- Run tests
  run_tests:
    needs: setup_environment
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checkout the Repository
      - name: Checkout Repository
        uses: actions/checkout@v2

      #- name: Run Pester Tests
      #  shell: pwsh
      #  run: Invoke-Pester -Path .\Tests\*.Tests.ps1

      - name: Run PSScriptAnalyzer on different folders
        shell: pwsh
        run: |
          Invoke-ScriptAnalyzer -Path .\Public  -recurse
          Invoke-ScriptAnalyzer -Path .\Private -recurse
          Invoke-ScriptAnalyzer -Path .\Enums   -recurse
          Invoke-ScriptAnalyzer -Path .\Classes -recurse

  # 3rd Job -- Build and Upload Artifacts
  build_and_upload:
    needs: run_tests
    runs-on: windows-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Invoke Build
        shell: pwsh
        run: .\Build\build.ps1 -Configuration 'Release' -ExportAlias

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: module-artifact
          path: ./Output/

      - name: Push changes to Git Repository
        run: |
          git config --global user.name 'vreguibar'
          git config --global user.email 'vicente@eguibarIT.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git add .
          git commit -am "Pushing Artifacts"
          git push

  # 4th Job -- Release and Publish
  release_and_publish:
    needs: build_and_upload
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: module-artifact
          path: ./Artifact/

      - name: Update Module Manifest
        shell: pwsh
        run: |
          $newVersion = ('v{0}' -f (Test-ModuleManifest -Path ".\EguibarIT.psd1").Version)
          $manifestPath = '.\EguibarIT.psd1'
          (Get-Content -Path $manifestPath -Raw) -replace 'Version = ''\d+\.\d+\.\d+''', "Version = '$newVersion'" | Set-Content -Path $manifestPath

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.release_and_publish.outputs.newVersion }}
          release_name: Release ${{ steps.release_and_publish.outputs.newVersion }}
          draft: false
          prerelease: false

      - name: Publish to PowerShell Gallery
        uses: pcgeek86/publish-powershell-module-action@v20
        with:
          modulePath: ./Artifact/
          NuGetApiKey: ${{ secrets.PS_GALLERY_KEY }}
