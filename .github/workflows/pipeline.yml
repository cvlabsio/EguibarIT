#https://scriptingchris.tech/2021/05/16/how-to-setup-a-github-actions-pipeline-for-publishing-your-powershell-module/

name: Build and Release Module
on:
  pull_request: # Only trigger the workflow if there is a pull request to the main branch
    branches: [ main ]

  workflow_dispatch: # Enables the possibility to trigger the workflow manually

  push:
      tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

env:
  BUILD_NUMBER: ${{ vars.BUILD_NUMBER }}
  MODULE_NAME: ${{ vars.MODULE_NAME }}
  VERSION_NUMBER: ${{ vars.VERSION_NUMBER }}


jobs:
  # 1st Job -- Building the module
  build:
    name: Build Module
    runs-on: windows-latest

    steps:
        # Checkout the main branch
      - name: Checkout Repository
        uses: actions/checkout@v2


      - name: Get Module Name
        shell: pwsh
        run: |
          $ModuleName = (Test-ModuleManifest -Path '.\*.psd1').Name
          Write-Output "MODULE_NAME=$ModuleName" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append


      - name: Install PSScriptAnalyzer module
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module PSScriptAnalyzer -ErrorAction Stop


      - name: Lint with PSScriptAnalyzer
        shell: pwsh
        run: |
          Invoke-ScriptAnalyzer -Path *.ps1 -Recurse -Outvariable issues
          $errors   = $issues.Where({$_.Severity -eq 'Error'})
          $warnings = $issues.Where({$_.Severity -eq 'Warning'})
          if ($errors) {
              Write-Error "There were $($errors.Count) errors and $($warnings.Count) warnings total." -ErrorAction Stop
          } else {
              Write-Output "There were $($errors.Count) errors and $($warnings.Count) warnings total."
          }


      - name: Update Module Manifest
        id: update_manifest
        shell: pwsh
        run: |
          $oldModuleVersion = (Test-ModuleManifest -Path ".\EguibarIT.psd1").Version
          $publicFunctions = Get-ChildItem -Path '.\Public\*.ps1'
          $privateFunctions = Get-ChildItem -Path '.\Private\*.ps1'
          $ClassesFunctions = Get-ChildItem -Path '.\Classes\*.ps1'
          $EnumsFunctions = Get-ChildItem -Path '.\Enums\*.ps1'
          $totalFunctions = $publicFunctions.count + $privateFunctions.count + $ClassesFunctions.count + $EnumsFunctions.count
          $ModuleBuildNumber = $oldModuleVersion.Build + 1
          $ModuleVersion = "$($oldModuleVersion.Major).$($totalFunctions).$($ModuleBuildNumber)"
          Update-ModuleManifest -Path ".\EguibarIT.psd1" -ModuleVersion $ModuleVersion

          Write-Output "BUILD_NUMBER=$ModuleVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append


      - name: Copy Artifact
        id: Copy_Artifact
        shell: pwsh
        run: |
          if (Test-Path ".\Output\${{ env.MODULE_NAME }}\${{ env.BUILD_NUMBER }}") {
              Write-Warning -Message "Version: ${{ env.BUILD_NUMBER }} - folder was detected in .\Output\${{ env.MODULE_NAME }}. Removing old temp folder."
              Remove-Item ".\Output\${{ env.MODULE_NAME }}\${{ env.BUILD_NUMBER }}" -Recurse -Force
          } #end If

          Write-Verbose -Message "Creating new temp module version folder: .\Output\${{ env.MODULE_NAME }}\${{ env.BUILD_NUMBER }}."
          if (Test-Path ".\Output\${{ env.MODULE_NAME }}") {
              Write-Verbose -Message 'Detected old folder, removing it from output folder'
              Remove-Item -Path ".\Output\${{ env.MODULE_NAME }}" -Recurse -Force
          } #end If

          try {
              New-Item -Path ".\Output\${{ env.MODULE_NAME }}\${{ env.BUILD_NUMBER }}" -ItemType Directory
          } catch {
              throw "Failed creating the new temp module folder: .\Output\${{ env.MODULE_NAME }}\${{ env.BUILD_NUMBER }}"
          } #end Try-Catch

          Write-Verbose -Message 'Generating the Module Manifest for temp build and generating new Module File'
          try {
              Copy-Item -Path ".\${{ env.MODULE_NAME }}.psd1" -Destination ".\Output\${{ env.MODULE_NAME }}\$ModuleVersion\"
              New-Item -Path ".\Output\${{ env.MODULE_NAME }}\$ModuleVersion\${{ env.MODULE_NAME }}.psm1" -ItemType File
          } catch {
              throw "Failed copying Module Manifest from: .\${{ env.MODULE_NAME }}.psd1 to .\Output\${{ env.MODULE_NAME }}\$ModuleVersion\ or Generating the new psm file."
          } #end Try-Catch

          Write-Verbose -Message 'Updating Module Manifest with Public Functions'
          try {
              Write-Verbose -Message 'Appending Public functions to the psm file'
              $functionsToExport = New-Object -TypeName System.Collections.ArrayList
              foreach ($function in $publicFunctions.Name) {
                  Write-Verbose -Message "Exporting function: $(($function.split('.')[0]).ToString())"
                  $functionsToExport.Add(($function.split('.')[0]).ToString())
              }
              Update-ModuleManifest -Path ".\Output\${{ env.MODULE_NAME }}\${{ env.BUILD_NUMBER }}\${{ env.MODULE_NAME }}.psd1" -FunctionsToExport $functionsToExport
          } catch {
              throw 'Failed updating Module manifest with public functions'
          } #end Try-Catch

          Write-Verbose -Message 'Copying Public .ps1 files'
          try {
              New-Item -Path ".\Output\${{ env.MODULE_NAME }}\${{ env.BUILD_NUMBER }}\Public" -ItemType Directory -ErrorAction Continue
              Copy-Item -Path ".\${{ env.MODULE_NAME }}.psm1" -Destination ".\Output\${{ env.MODULE_NAME }}\$ModuleVersion\"
              Copy-Item -Path '.\Public\*.ps1' -Destination ".\Output\${{ env.MODULE_NAME }}\$ModuleVersion\Public\"
          } catch {
              throw "Failed copying Public functions from: .\${{ env.MODULE_NAME }}\Public\ to .\Output\${{ env.MODULE_NAME }}\$ModuleVersion\Public\"
          } #end Try-Catch

          Write-Verbose -Message 'Copying Private .ps1 functions'
          try {
              New-Item -Path ".\Output\${{ env.MODULE_NAME }}\${{ env.BUILD_NUMBER }}\Private" -ItemType Directory -ErrorAction Continue
              Copy-Item -Path '.\Private\*.ps1' -Destination ".\Output\${{ env.MODULE_NAME }}\$ModuleVersion\Private\"
          } catch {
              throw "Failed copying Private functions from: .\${{ env.MODULE_NAME }}\Private\ to .\Output\${{ env.MODULE_NAME }}\$ModuleVersion\Private\"
          } #end Try-Catch

          Write-Verbose -Message 'Copying Classes .ps1 functions'
          try {
              New-Item -Path ".\Output\${{ env.MODULE_NAME }}\${{ env.BUILD_NUMBER }}\Classes" -ItemType Directory -ErrorAction Continue
              Copy-Item -Path '.\Classes\*.ps1' -Destination ".\Output\${{ env.MODULE_NAME }}\$ModuleVersion\Classes\"
          } catch {
              throw "Failed copying Classes functions from: .\${{ env.MODULE_NAME }}\Classes\ to .\Output\${{ env.MODULE_NAME }}\$ModuleVersion\Classes\"
          } #end Try-Catch

          Write-Verbose -Message 'Copying Enums .ps1 functions'
          try {
              New-Item -Path ".\Output\${{ env.MODULE_NAME }}\${{ env.BUILD_NUMBER }}\Enums" -ItemType Directory -ErrorAction Continue
              Copy-Item -Path '.\Enums\*.ps1' -Destination ".\Output\${{ env.MODULE_NAME }}\$ModuleVersion\Enums\"
          } catch {
              throw "Failed copying Enums functions from: .\${{ env.MODULE_NAME }}\Enums\ to .\Output\${{ env.MODULE_NAME }}\$ModuleVersion\Enums\"
          } #end Try-Catch

          Write-Verbose -Message 'Updating Module Manifest with root module'
          try {
              Write-Verbose -Message 'Updating the Module Manifest'
              Update-ModuleManifest -Path ".\Output\${{ env.MODULE_NAME }}\${{ env.BUILD_NUMBER }}\${{ env.MODULE_NAME }}.psd1" -RootModule "${{ env.MODULE_NAME }}.psm1"
          } catch {
              Write-Warning -Message 'Failed appinding the rootmodule to the Module Manifest'
          }

          Write-Verbose -Message 'Compiling Help files'
          Write-Verbose -Message 'Importing the module to be able to output documentation'
          Try {
              Write-Verbose -Message 'Importing the module to be able to output documentation'
              Import-Module ".\Output\${{ env.MODULE_NAME }}\$ModuleVersion\${{ env.MODULE_NAME }}.psm1"
          } catch {
              throw "Failed importing the module: ${{ env.MODULE_NAME }}"
          }



        # Pushing the changes from InvokeBuild to the main branch
      - name: Push changes to Git Repository
        run: |
          git config --global user.name 'vreguibar'
          git config --global user.email 'vicente@eguibarIT.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git add .
          git commit -m "Build Module"
          git push

        # Uploads the build powershell module as an artifact
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: module-artifact # Naming the powershell module artifact
          path: ./Output/${{ env.MODULE_NAME }}/${{ env.BUILD_NUMBER }}/ # Saving the powershell module artifact to the path ./Artifact/



  # 2nd Job -- Releasing the module
  release:
    name: Release Module
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Read exported variable
        id: Read_Var
        shell: pwsh
        run: |
          $ModuleVersion = (Test-ModuleManifest -Path ".\EguibarIT.psd1").Version
          $PS_Module_Version = ('v{0}' -f $ModuleVersion)

          Write-Output "BUILD_NUMBER=$ModuleVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Output "VERSION_NUMBER=$PS_Module_Version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: show variable
        run: |
          echo "${{ env.BUILD_NUMBER }}"
          echo "${{ env.VERSION_NUMBER }}"
          echo "${{ env.MODULE_NAME }}"

      - name: Check if Release Exists
        id: check_release
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tagName = process.env.MODULE_VERSION;
            const { data: releases } = await github.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const releaseExists = releases.some(release => release.tag_name === tagName);
            console.log(`Release ${tagName} exists: ${releaseExists}`);
            console.log(`::set-output name=exists::${releaseExists}`);


      - name: Download Artifact
        uses: aochmann/actions-download-artifact@1.0.4
        with:
          repo: ${{github.repository}}
          name: module-artifact # Name of the PowerShell module artifact
          path: ./Output/${{ env.MODULE_NAME }}/${{ env.BUILD_NUMBER }}/ # Downloads the module to the path ./Output/



        # Create a release to github
      - name: Create Release
        if: steps.check_release.outputs.exists != 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION_NUMBER }}
          release_name: Release ${{ env.BUILD_NUMBER }}
          draft: false
          prerelease: false


      # Publishing the module to powershell gallery
      - name: Publish to PowerShell Gallery
        uses: pcgeek86/publish-powershell-module-action@v20
        with:
          modulePath: ./Output/${{ env.MODULE_NAME }}/${{ env.BUILD_NUMBER }}/
          NuGetApiKey: ${{ secrets.PS_GALLERY_KEY }}
