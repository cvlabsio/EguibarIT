#https://scriptingchris.tech/2021/05/16/how-to-setup-a-github-actions-pipeline-for-publishing-your-powershell-module/

name: Build and Release Module
on:
  pull_request: # Only trigger the workflow if there is a pull request to the main branch
    branches: [ main ]

  workflow_dispatch: # Enables the possibility to trigger the workflow manually

  push:
      tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  # 1st Job -- Building the module
  build:
    name: Build Module
    runs-on: windows-latest
    steps:
        # Checkout the main branch
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install PSScriptAnalyzer module
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module PSScriptAnalyzer -ErrorAction Stop


      - name: Lint with PSScriptAnalyzer
        shell: pwsh
        run: |
          Invoke-ScriptAnalyzer -Path *.ps1 -Recurse -Outvariable issues
          $errors   = $issues.Where({$_.Severity -eq 'Error'})
          $warnings = $issues.Where({$_.Severity -eq 'Warning'})
          if ($errors) {
              Write-Error "There were $($errors.Count) errors and $($warnings.Count) warnings total." -ErrorAction Stop
          } else {
              Write-Output "There were $($errors.Count) errors and $($warnings.Count) warnings total."
          }

        # Running the InvokeBuild Module Invoke-Build command with "Release configuration"
      - name: Invoke Build script
        shell: pwsh
        run: .\build.ps1 -Configuration 'Release' -ExportAlias

        # Pushing the changes from InvokeBuild to the main branch
      - name: Push changes to Git Repository
        run: |
          git config --global user.name 'vreguibar'
          git config --global user.email 'vicente@eguibarIT.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git add .
          git commit -m "Build Module"
          git push

        # Uploads the build powershell module as an artifact
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: module-artifact # Naming the powershell module artifact
          path: ./Output/ # Saving the powershell module artifact to the path ./Output/

  # 2nd Job -- Releasing the module
  release:
    name: Release Module
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Get Module Version
        id: get_version
        shell: pwsh
        run: |
          $PS_Module_Version = ('v{0}' -f (Test-ModuleManifest -Path ".\EguibarIT.psd1").Version)
          echo "MODULE_VERSION=$PS_Module_Version" >> $GITHUB_ENV
          echo "Module version is $PS_Module_Version"

      - name: Check if Release Exists
        id: check_release
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tagName = process.env.MODULE_VERSION;
            const { data: releases } = await github.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const releaseExists = releases.some(release => release.tag_name === tagName);
            console.log(`Release ${tagName} exists: ${releaseExists}`);
            console.log(`::set-output name=exists::${releaseExists}`);


      - name: Create Release
        if: steps.check_release.outputs.exists != 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.MODULE_VERSION }}
          release_name: Release ${{ env.MODULE_VERSION }}
          draft: false
          prerelease: false


        # Publishing the module to powershell gallery
      - name: Publish to Powershell Gallery
        # You may pin to the exact commit or the version.
        uses: plaster/Publish-ModuleToPSGallery@v1
        with:
          Path: ./Output/${{ env.MODULE_NAME }} # Using the environment variable to find the module name
          NuGetApiKey: ${{ secrets.PS_GALLERY_KEY }} # Using the NugetAPI key set in GitHub Secrets
