#https://scriptingchris.tech/2021/05/16/how-to-setup-a-github-actions-pipeline-for-publishing-your-powershell-module/

name: Build and Release Module
on:
  pull_request: # Only trigger the workflow if there is a pull request to the main branch
    branches: [ main ]

  workflow_dispatch: # Enables the possibility to trigger the workflow manually

  push:
      tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

env:
  # Setting an environment variable with the value of a configuration variable
  MODULE_VERSION: ''
  MODULE_NAME: ${{ vars.MODULE_NAME }}

jobs:
  # 1st Job -- Building the module
  build:
    name: Build Module
    runs-on: windows-latest

    steps:
        # Checkout the main branch
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install PSScriptAnalyzer module
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module PSScriptAnalyzer -ErrorAction Stop


      - name: Lint with PSScriptAnalyzer
        shell: pwsh
        run: |
          Invoke-ScriptAnalyzer -Path *.ps1 -Recurse -Outvariable issues
          $errors   = $issues.Where({$_.Severity -eq 'Error'})
          $warnings = $issues.Where({$_.Severity -eq 'Warning'})
          if ($errors) {
              Write-Error "There were $($errors.Count) errors and $($warnings.Count) warnings total." -ErrorAction Stop
          } else {
              Write-Output "There were $($errors.Count) errors and $($warnings.Count) warnings total."
          }

      - name: Update Module Manifest
        id: update_manifest
        shell: pwsh
        run: |
          $oldModuleVersion = (Test-ModuleManifest -Path ".\EguibarIT.psd1").Version
          $publicFunctions = Get-ChildItem -Path '.\Public\*.ps1'
          $privateFunctions = Get-ChildItem -Path '.\Private\*.ps1'
          $ClassesFunctions = Get-ChildItem -Path '.\Classes\*.ps1'
          $EnumsFunctions = Get-ChildItem -Path '.\Enums\*.ps1'
          $totalFunctions = $publicFunctions.count + $privateFunctions.count + $ClassesFunctions.count + $EnumsFunctions.count
          $ModuleBuildNumber = $oldModuleVersion.Build + 1
          $ModuleVersion = "$($oldModuleVersion.Major).$($totalFunctions).$($ModuleBuildNumber)"
          Update-ModuleManifest -Path ".\EguibarIT.psd1" -ModuleVersion $ModuleVersion
          #Add-Content -Path $env:GITHUB_ENV -Value "MODULE_VERSION=$ModuleVersion"
          echo "MODULE_VERSION=$ModuleVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "Old version was $oldModuleVersion and New is $ModuleVersion"
          echo "The new version is ${{env.MODULE_VERSION}}"


        # Pushing the changes from InvokeBuild to the main branch
      - name: Push changes to Git Repository
        run: |
          git config --global user.name 'vreguibar'
          git config --global user.email 'vicente@eguibarIT.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git add .
          git commit -m "Build Module"
          git push

        # Uploads the build powershell module as an artifact
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: module-artifact # Naming the powershell module artifact
          path: ./Output/EguibarIT/${{env.MODULE_VERSION}}/ # Saving the powershell module artifact to the path ./Artifact/



  # 2nd Job -- Releasing the module
  release:
    name: Release Module
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2


      - name: Check if Release Exists
        id: check_release
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tagName = process.env.MODULE_VERSION;
            const { data: releases } = await github.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const releaseExists = releases.some(release => release.tag_name === tagName);
            console.log(`Release ${tagName} exists: ${releaseExists}`);
            console.log(`::set-output name=exists::${releaseExists}`);


      - name: Download Artifact
        uses: aochmann/actions-download-artifact@1.0.4
        with:
          repo: ${{github.repository}}
          name: module-artifact # Name of the PowerShell module artifact
          path: ./Output/EguibarIT/${{env.MODULE_VERSION}}/ # Downloads the module to the path ./Output/



        # Create a release to github
      - name: Create Release
        if: steps.check_release.outputs.exists != 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{env.MODULE_VERSION}}
          release_name: Release ${{env.MODULE_VERSION}}
          draft: false
          prerelease: false


      # Publishing the module to powershell gallery
      - name: Publish to PowerShell Gallery
        uses: pcgeek86/publish-powershell-module-action@v20
        with:
          modulePath: ./Output/EguibarIT/${{env.MODULE_VERSION}}/
          NuGetApiKey: ${{ secrets.PS_GALLERY_KEY }}
