#https://scriptingchris.tech/2021/05/16/how-to-setup-a-github-actions-pipeline-for-publishing-your-powershell-module/

name: testing
on:
  pull_request: # Only trigger the workflow if there is a pull request to the main branch
    branches: [ main ]

  workflow_dispatch: # Enables the possibility to trigger the workflow manually

  push:
      tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

env:
  BUILD_NUMBER: ${{ vars.BUILD_NUMBER }}

jobs:
  # 1st Job -- Building the module
  build:
    runs-on: windows-latest
    steps:
        # Check out the main branch
      - uses: actions/checkout@master

      - name: OTHER TEST
        id: tag
        shell: pwsh
        run: |
          $PS_Module_Version = ('v{0}' -f (Test-ModuleManifest -Path ".\EguibarIT.psd1").Version)

          $oldModuleVersion = (Test-ModuleManifest -Path ".\EguibarIT.psd1").Version
          $publicFunctions = Get-ChildItem -Path '.\Public\*.ps1'
          $privateFunctions = Get-ChildItem -Path '.\Private\*.ps1'
          $ClassesFunctions = Get-ChildItem -Path '.\Classes\*.ps1'
          $EnumsFunctions = Get-ChildItem -Path '.\Enums\*.ps1'
          $totalFunctions = $publicFunctions.count + $privateFunctions.count + $ClassesFunctions.count + $EnumsFunctions.count
          $ModuleBuildNumber = $oldModuleVersion.Build + 1
          $ModuleVersion = "$($oldModuleVersion.Major).$($totalFunctions).$($ModuleBuildNumber)"
          Update-ModuleManifest -Path ".\EguibarIT.psd1" -ModuleVersion $ModuleVersion

          Write-Output "BUILD_NUMBER=$ModuleVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Output "OLD_NUMBER=$oldModuleVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Read exported variable
        run: |
          echo "${{ env.BUILD_NUMBER }}"
          echo "${{ env.OLD_NUMBER }}"

  # 2nd Job -- Releasing the module
  release:
    name: Release Module
    needs: build
    runs-on: windows-latest

    steps:

      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Read exported variable
        run: |
          $PS_Module_Version = ('v{0}' -f (Test-ModuleManifest -Path ".\EguibarIT.psd1").Version)
          $ModuleVersion = (Test-ModuleManifest -Path ".\EguibarIT.psd1").Version

          Write-Output "BUILD_NUMBER=$ModuleVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Output "VERSION_NUMBER=$PS_Module_Version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: show variable
        run: |
          echo "${{ env.BUILD_NUMBER }}"
          echo "${{ env.VERSION_NUMBER }}"
















      - name: Copy Artifact
        id: Copy_Artifact
        shell: pwsh
        run: |
          if (Test-Path ".\Output\${{ env.MODULE_NAME }}\${{ env.BUILD_NUMBER }}") {
              Write-Warning -Message "Version: ${{ env.BUILD_NUMBER }} - folder was detected in .\Output\${{ env.MODULE_NAME }}. Removing old temp folder."
              Remove-Item ".\Output\${{ env.MODULE_NAME }}\${{ env.BUILD_NUMBER }}" -Recurse -Force
          } #end If

          Write-Verbose -Message "Creating new temp module version folder: .\Output\${{ env.MODULE_NAME }}\${{ env.BUILD_NUMBER }}."
          if (Test-Path ".\Output\${{ env.MODULE_NAME }}") {
              Write-Verbose -Message 'Detected old folder, removing it from output folder'
              Remove-Item -Path ".\Output\${{ env.MODULE_NAME }}" -Recurse -Force
          } #end If

          try {
              New-Item -Path ".\Output\${{ env.MODULE_NAME }}\${{ env.BUILD_NUMBER }}" -ItemType Directory
          } catch {
              throw "Failed creating the new temp module folder: .\Output\${{ env.MODULE_NAME }}\${{ env.BUILD_NUMBER }}"
          } #end Try-Catch

          Write-Verbose -Message 'Generating the Module Manifest for temp build and generating new Module File'
          try {
              Copy-Item -Path ".\${{ env.MODULE_NAME }}.psd1" -Destination ".\Output\${{ env.MODULE_NAME }}\$ModuleVersion\"
              New-Item -Path ".\Output\${{ env.MODULE_NAME }}\$ModuleVersion\${{ env.MODULE_NAME }}.psm1" -ItemType File
          } catch {
              throw "Failed copying Module Manifest from: .\${{ env.MODULE_NAME }}.psd1 to .\Output\${{ env.MODULE_NAME }}\$ModuleVersion\ or Generating the new psm file."
          } #end Try-Catch

          Write-Verbose -Message 'Updating Module Manifest with Public Functions'
          try {
              Write-Verbose -Message 'Appending Public functions to the psm file'
              $functionsToExport = New-Object -TypeName System.Collections.ArrayList
              foreach ($function in $publicFunctions.Name) {
                  Write-Verbose -Message "Exporting function: $(($function.split('.')[0]).ToString())"
                  $functionsToExport.Add(($function.split('.')[0]).ToString())
              }
              Update-ModuleManifest -Path ".\Output\${{ env.MODULE_NAME }}\${{ env.BUILD_NUMBER }}\${{ env.MODULE_NAME }}.psd1" -FunctionsToExport $functionsToExport
          } catch {
              throw 'Failed updating Module manifest with public functions'
          } #end Try-Catch

          Write-Verbose -Message 'Copying Public .ps1 files'
          try {
              New-Item -Path ".\Output\${{ env.MODULE_NAME }}\${{ env.BUILD_NUMBER }}\Public" -ItemType Directory -ErrorAction Continue
              Copy-Item -Path ".\${{ env.MODULE_NAME }}.psm1" -Destination ".\Output\${{ env.MODULE_NAME }}\$ModuleVersion\"
              Copy-Item -Path '.\Public\*.ps1' -Destination ".\Output\${{ env.MODULE_NAME }}\$ModuleVersion\Public\"
          } catch {
              throw "Failed copying Public functions from: .\${{ env.MODULE_NAME }}\Public\ to .\Output\${{ env.MODULE_NAME }}\$ModuleVersion\Public\"
          } #end Try-Catch

          Write-Verbose -Message 'Copying Private .ps1 functions'
          try {
              New-Item -Path ".\Output\${{ env.MODULE_NAME }}\${{ env.BUILD_NUMBER }}\Private" -ItemType Directory -ErrorAction Continue
              Copy-Item -Path '.\Private\*.ps1' -Destination ".\Output\${{ env.MODULE_NAME }}\$ModuleVersion\Private\"
          } catch {
              throw "Failed copying Private functions from: .\${{ env.MODULE_NAME }}\Private\ to .\Output\${{ env.MODULE_NAME }}\$ModuleVersion\Private\"
          } #end Try-Catch

          Write-Verbose -Message 'Copying Classes .ps1 functions'
          try {
              New-Item -Path ".\Output\${{ env.MODULE_NAME }}\${{ env.BUILD_NUMBER }}\Classes" -ItemType Directory -ErrorAction Continue
              Copy-Item -Path '.\Classes\*.ps1' -Destination ".\Output\${{ env.MODULE_NAME }}\$ModuleVersion\Classes\"
          } catch {
              throw "Failed copying Classes functions from: .\${{ env.MODULE_NAME }}\Classes\ to .\Output\${{ env.MODULE_NAME }}\$ModuleVersion\Classes\"
          } #end Try-Catch

          Write-Verbose -Message 'Copying Enums .ps1 functions'
          try {
              New-Item -Path ".\Output\${{ env.MODULE_NAME }}\${{ env.BUILD_NUMBER }}\Enums" -ItemType Directory -ErrorAction Continue
              Copy-Item -Path '.\Enums\*.ps1' -Destination ".\Output\${{ env.MODULE_NAME }}\$ModuleVersion\Enums\"
          } catch {
              throw "Failed copying Enums functions from: .\${{ env.MODULE_NAME }}\Enums\ to .\Output\${{ env.MODULE_NAME }}\$ModuleVersion\Enums\"
          } #end Try-Catch

          Write-Verbose -Message 'Updating Module Manifest with root module'
          try {
              Write-Verbose -Message 'Updating the Module Manifest'
              Update-ModuleManifest -Path ".\Output\${{ env.MODULE_NAME }}\${{ env.BUILD_NUMBER }}\${{ env.MODULE_NAME }}.psd1" -RootModule "${{ env.MODULE_NAME }}.psm1"
          } catch {
              Write-Warning -Message 'Failed appinding the rootmodule to the Module Manifest'
          }

          Write-Verbose -Message 'Compiling Help files'
          Write-Verbose -Message 'Importing the module to be able to output documentation'
          Try {
              Write-Verbose -Message 'Importing the module to be able to output documentation'
              Import-Module ".\Output\${{ env.MODULE_NAME }}\$ModuleVersion\${{ env.MODULE_NAME }}.psm1"
          } catch {
              throw "Failed importing the module: ${{ env.MODULE_NAME }}"
          }
